// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test "and" parameter forces all rules to pass for read 1`] = `
"#set( $compoundAuthRuleCounts = {} )
## [Start] Static Group Authorization Checks **
#set($isStaticGroupAuthorized = $util.defaultIfNull(
            $isStaticGroupAuthorized, false))
## Authorization rule: { allow: groups, groups: \\"[\\"Dev\\"]\\"   } **
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#set( $allowedGroups = [\\"Dev\\"] )
#foreach( $userGroup in $userGroups )
  #if( $allowedGroups.contains($userGroup) )
    #set( $isStaticGroupAuthorized = true )
  #end
#end
## Authorization rule: { allow: groups, groups: \\"[\\"Admin\\"]\\"  , and: \\"testing\\" } **
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#set( $allowedGroups = [\\"Admin\\"] )
#foreach( $userGroup in $userGroups )
  #if( $allowedGroups.contains($userGroup) )
    #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
  #end
#end
## [End] Static Group Authorization Checks **


## [Start] Dynamic Group Authorization Checks **
#set( $isDynamicGroupAuthorized = $util.defaultIfNull($isDynamicGroupAuthorized, false) )
## Authorization rule: { allow: groups, groupsField: \\"groupField\\"  , and: \\"testing\\" } **
#set( $allowedGroups = $util.defaultIfNull($ctx.result.groupField, []) )
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#foreach( $userGroup in $userGroups )
  #if( $util.isList($allowedGroups) )
    #if( $allowedGroups.contains($userGroup) )
      #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
    #end
  #end
  #if( $util.isString($allowedGroups) )
    #if( $allowedGroups == $userGroup )
      #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
    #end
  #end
#end
## [End] Dynamic Group Authorization Checks **


## [Start] Owner Authorization Checks **
#set( $isOwnerAuthorized = $util.defaultIfNull($isOwnerAuthorized, false) )
## Authorization rule: { allow: owner, ownerField: \\"owner\\", identityClaim: \\"cognito:username\\"  , and: \\"testing\\" } **
#set( $allowedOwners0 = $ctx.result.owner )
#set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
#if( $util.isList($allowedOwners0) )
  #foreach( $allowedOwner in $allowedOwners0 )
    #if( $allowedOwner == $identityValue )
      #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
    #end
  #end
#end
#if( $util.isString($allowedOwners0) )
  #if( $allowedOwners0 == $identityValue )
    #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
  #end
#end
## [End] Owner Authorization Checks **


## [Start] Throw if unauthorized **
#if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true || !$util.defaultIfNull($compoundAuthRuleCounts.testing, 0) == 3) )
  $util.unauthorized()
#end
## [End] Throw if unauthorized **

$util.toJson($context.result)"
`;

exports[`Test "and" parameter forces all rules to pass for read 2`] = `
"#set( $compoundAuthRuleCounts = {} )
## [Start] Static Group Authorization Checks **
#set($isStaticGroupAuthorized = $util.defaultIfNull(
            $isStaticGroupAuthorized, false))
## Authorization rule: { allow: groups, groups: \\"[\\"Dev\\"]\\"   } **
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#set( $allowedGroups = [\\"Dev\\"] )
#foreach( $userGroup in $userGroups )
  #if( $allowedGroups.contains($userGroup) )
    #set( $isStaticGroupAuthorized = true )
  #end
#end
## Authorization rule: { allow: groups, groups: \\"[\\"Admin\\"]\\"  , and: \\"testing\\" } **
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#set( $allowedGroups = [\\"Admin\\"] )
#foreach( $userGroup in $userGroups )
  #if( $allowedGroups.contains($userGroup) )
    #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
  #end
#end
## [End] Static Group Authorization Checks **


## [Start] If not static group authorized, filter items **
#if( true )
  #set( $items = [] )
  #foreach( $item in $ctx.result.items )
    ## [Start] Dynamic Group Authorization Checks **
    #set( $isLocalDynamicGroupAuthorized = false )
    ## Authorization rule: { allow: groups, groupsField: \\"groupField\\"  , and: \\"testing\\" } **
    #set( $allowedGroups = $util.defaultIfNull($item.groupField, []) )
    #set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
    #foreach( $userGroup in $userGroups )
      #if( $util.isList($allowedGroups) )
        #if( $allowedGroups.contains($userGroup) )
          #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
        #end
      #end
      #if( $util.isString($allowedGroups) )
        #if( $allowedGroups == $userGroup )
          #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
        #end
      #end
    #end
    ## [End] Dynamic Group Authorization Checks **


    ## [Start] Owner Authorization Checks **
    #set( $isLocalOwnerAuthorized = false )
    ## Authorization rule: { allow: owner, ownerField: \\"owner\\", identityClaim: \\"cognito:username\\"  , and: \\"testing\\" } **
    #set( $allowedOwners0 = $item.owner )
    #set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
    #if( $util.isList($allowedOwners0) )
      #foreach( $allowedOwner in $allowedOwners0 )
        #if( $allowedOwner == $identityValue )
          #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
        #end
      #end
    #end
    #if( $util.isString($allowedOwners0) )
      #if( $allowedOwners0 == $identityValue )
        #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
      #end
    #end
    ## [End] Owner Authorization Checks **


    #if( $isStaticGroupAuthorized == true || $isLocalDynamicGroupAuthorized == true || $isLocalOwnerAuthorized == true || $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) == 3 )
      $util.qr($items.add($item))
    #end
  #end
  #set( $ctx.result.items = $items )
#end
## [End] If not static group authorized, filter items **

$util.toJson($ctx.result)"
`;

exports[`Test "create", "update", "delete" auth operations with "and" parameter forces all rules to pass 1`] = `
"#set( $compoundAuthRuleCounts = {} )
## [Start] Static Group Authorization Checks **
#set($isStaticGroupAuthorized = $util.defaultIfNull(
            $isStaticGroupAuthorized, false))
## Authorization rule: { allow: groups, groups: \\"[\\"Admin\\"]\\"  , and: \\"testing\\" } **
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#set( $allowedGroups = [\\"Admin\\"] )
#foreach( $userGroup in $userGroups )
  #if( $allowedGroups.contains($userGroup) )
    #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
  #end
#end
## [End] Static Group Authorization Checks **


## [Start] Dynamic Group Authorization Checks **
#set( $isDynamicGroupAuthorized = $util.defaultIfNull($isDynamicGroupAuthorized, false) )
## Authorization rule: { allow: groups, groupsField: \\"groupField\\"  , and: \\"testing\\" } **
#set( $allowedGroups = $util.defaultIfNull($ctx.result.groupField, []) )
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#foreach( $userGroup in $userGroups )
  #if( $util.isList($allowedGroups) )
    #if( $allowedGroups.contains($userGroup) )
      #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
    #end
  #end
  #if( $util.isString($allowedGroups) )
    #if( $allowedGroups == $userGroup )
      #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
    #end
  #end
#end
## [End] Dynamic Group Authorization Checks **


## No Owner Authorization Rules **


## [Start] Throw if unauthorized **
#if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true || !$util.defaultIfNull($compoundAuthRuleCounts.testing, 0) == 2) )
  $util.unauthorized()
#end
## [End] Throw if unauthorized **

$util.toJson($context.result)"
`;

exports[`Test "create", "update", "delete" auth operations with "and" parameter forces all rules to pass 2`] = `
"#set( $compoundAuthRuleCounts = {} )
## [Start] Static Group Authorization Checks **
#set($isStaticGroupAuthorized = $util.defaultIfNull(
            $isStaticGroupAuthorized, false))
## Authorization rule: { allow: groups, groups: \\"[\\"Admin\\"]\\"  , and: \\"testing\\" } **
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#set( $allowedGroups = [\\"Admin\\"] )
#foreach( $userGroup in $userGroups )
  #if( $allowedGroups.contains($userGroup) )
    #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
  #end
#end
## [End] Static Group Authorization Checks **


## [Start] If not static group authorized, filter items **
#if( true )
  #set( $items = [] )
  #foreach( $item in $ctx.result.items )
    ## [Start] Dynamic Group Authorization Checks **
    #set( $isLocalDynamicGroupAuthorized = false )
    ## Authorization rule: { allow: groups, groupsField: \\"groupField\\"  , and: \\"testing\\" } **
    #set( $allowedGroups = $util.defaultIfNull($item.groupField, []) )
    #set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
    #foreach( $userGroup in $userGroups )
      #if( $util.isList($allowedGroups) )
        #if( $allowedGroups.contains($userGroup) )
          #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
        #end
      #end
      #if( $util.isString($allowedGroups) )
        #if( $allowedGroups == $userGroup )
          #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
        #end
      #end
    #end
    ## [End] Dynamic Group Authorization Checks **


    ## No Owner Authorization Rules **


    #if( $isStaticGroupAuthorized == true || $isLocalDynamicGroupAuthorized == true || $isLocalOwnerAuthorized == true || $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) == 2 )
      $util.qr($items.add($item))
    #end
  #end
  #set( $ctx.result.items = $items )
#end
## [End] If not static group authorized, filter items **

$util.toJson($ctx.result)"
`;

exports[`Test "create", "update", "delete" auth operations with "and" parameter forces all rules to pass 3`] = `
"#set( $compoundAuthRuleCounts = {} )
## [Start] Static Group Authorization Checks **
#set($isStaticGroupAuthorized = $util.defaultIfNull(
            $isStaticGroupAuthorized, false))
## Authorization rule: { allow: groups, groups: \\"[\\"Admin\\"]\\"  , and: \\"testing\\" } **
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#set( $allowedGroups = [\\"Admin\\"] )
#foreach( $userGroup in $userGroups )
  #if( $allowedGroups.contains($userGroup) )
    #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
  #end
#end
## Authorization rule: { allow: groups, groups: \\"[\\"Dev\\"]\\"  , and: \\"testing2\\" } **
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#set( $allowedGroups = [\\"Dev\\"] )
#foreach( $userGroup in $userGroups )
  #if( $allowedGroups.contains($userGroup) )
    #set( $compoundAuthRuleCounts.testing2 = $util.defaultIfNull($compoundAuthRuleCounts.testing2, 0) + 1 )
  #end
#end
## [End] Static Group Authorization Checks **


## [Start] Dynamic Group Authorization Checks **
## Authorization rule: { allow: groups, groupsField: \\"groupField\\"  , and: \\"testing\\" } **
#set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:groups\\"), []) )
#set( $isDynamicGroupAuthorized = $util.defaultIfNull($isDynamicGroupAuthorized, false) )
#foreach( $userGroup in $userGroups )
  #if( $util.isList($ctx.args.input.groupField) )
    #if( $ctx.args.input.groupField.contains($userGroup) )
      #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
    #end
  #end
  #if( $util.isString($ctx.args.input.groupField) )
    #if( $ctx.args.input.groupField == $userGroup )
      #set( $compoundAuthRuleCounts.testing = $util.defaultIfNull($compoundAuthRuleCounts.testing, 0) + 1 )
    #end
  #end
#end
## [End] Dynamic Group Authorization Checks **


## [Start] Owner Authorization Checks **
#set( $isOwnerAuthorized = false )
## Authorization rule: { allow: owner, ownerField: \\"owner\\", identityClaim: \\"cognito:username\\"  , and: \\"testing2\\" } **
#set( $allowedOwners0 = $util.defaultIfNull($ctx.args.input.owner, null) )
#set( $identityValue = $util.defaultIfNull($ctx.identity.claims.get(\\"username\\"), $util.defaultIfNull($ctx.identity.claims.get(\\"cognito:username\\"), \\"___xamznone____\\")) )
#if( $util.isList($allowedOwners0) )
  #foreach( $allowedOwner in $allowedOwners0 )
    #if( $allowedOwner == $identityValue )
      #set( $compoundAuthRuleCounts.testing2 = $util.defaultIfNull($compoundAuthRuleCounts.testing2, 0) + 1 )
    #end
  #end
#end
#if( $util.isString($allowedOwners0) )
  #if( $allowedOwners0 == $identityValue )
    #set( $compoundAuthRuleCounts.testing2 = $util.defaultIfNull($compoundAuthRuleCounts.testing2, 0) + 1 )
  #end
#end
#if( $util.isNull($allowedOwners0) && (! $ctx.args.input.containsKey(\\"owner\\")) )
  $util.qr($ctx.args.input.put(\\"owner\\", $identityValue))
  #set( $compoundAuthRuleCounts.testing2 = $util.defaultIfNull($compoundAuthRuleCounts.testing2, 0) + 1 )
#end
## [End] Owner Authorization Checks **


## [Start] Throw if unauthorized **
#if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true || !$util.defaultIfNull($compoundAuthRuleCounts.testing, 0) == 2 || !$util.defaultIfNull($compoundAuthRuleCounts.testing2, 0) == 2) )
  $util.unauthorized()
#end
## [End] Throw if unauthorized **

## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put(\\"createdAt\\", $util.defaultIfNull($ctx.args.input.createdAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"updatedAt\\", $util.defaultIfNull($ctx.args.input.updatedAt, $util.time.nowISO8601())))
$util.qr($context.args.input.put(\\"__typename\\", \\"Post\\"))
{
  \\"version\\": \\"2017-02-28\\",
  \\"operation\\": \\"PutItem\\",
  \\"key\\": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
  \\"id\\":   $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))
} #end,
  \\"attributeValues\\": $util.dynamodb.toMapValuesJson($context.args.input),
  \\"condition\\": {
      \\"expression\\": \\"attribute_not_exists(#id)\\",
      \\"expressionNames\\": {
          \\"#id\\": \\"id\\"
    }
  }
}
## [End] Prepare DynamoDB PutItem Request. **"
`;
